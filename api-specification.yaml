openapi: 3.0.3
info:
  title: USA Application API
  description: API for the USA (United States Application) - a full-stack web application with a California democracy theme
  version: 1.0.0
  contact:
    name: USA Development Team
    email: dev@usa-app.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://api.usa-app.com
    description: Production server

tags:
  - name: Users
    description: User management operations
  - name: Data
    description: General data management operations

paths:
  /:
    get:
      summary: Welcome message
      description: Returns a welcome message for the API
      responses:
        '200':
          description: Welcome message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Welcome to the USA Backend API"

  /api/users:
    get:
      tags:
        - Users
      summary: Get all active users
      description: Retrieve a list of all active users
      parameters:
        - name: limit
          in: query
          description: Number of users to return
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
      responses:
        '200':
          description: List of active users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - firstName
                - lastName
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                  example: "john_doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                password:
                  type: string
                  minLength: 6
                  example: "password123"
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Users
      summary: Update user
      description: Update an existing user's information
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 30
                  example: "john_doe_updated"
                email:
                  type: string
                  format: email
                  example: "john.updated@example.com"
                firstName:
                  type: string
                  example: "John"
                lastName:
                  type: string
                  example: "Doe"
                isActive:
                  type: boolean
                  example: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - username or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Users
      summary: Deactivate user
      description: Soft delete a user (set isActive to false)
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deactivated successfully"
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/data:
    get:
      tags:
        - Data
      summary: Get all data with filtering
      description: Retrieve data entries with optional filtering and pagination
      parameters:
        - name: type
          in: query
          description: Filter by data type
          required: false
          schema:
            type: string
            enum: [user, system, analytics, other]
        - name: category
          in: query
          description: Filter by category
          required: false
          schema:
            type: string
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          required: false
          schema:
            type: string
            example: "tag1,tag2,tag3"
        - name: isPublic
          in: query
          description: Filter by public status
          required: false
          schema:
            type: boolean
        - name: limit
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            default: 50
            minimum: 1
            maximum: 100
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
      responses:
        '200':
          description: List of data entries with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Data'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Data
      summary: Create new data entry
      description: Create a new data entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
                - type
              properties:
                title:
                  type: string
                  example: "Sample Data Entry"
                description:
                  type: string
                  example: "This is a sample data entry"
                content:
                  type: object
                  description: Flexible content object
                  example: {"key": "value", "number": 42}
                type:
                  type: string
                  enum: [user, system, analytics, other]
                  example: "user"
                category:
                  type: string
                  example: "general"
                tags:
                  type: array
                  items:
                    type: string
                  example: ["tag1", "tag2"]
                isPublic:
                  type: boolean
                  default: false
                  example: true
                createdBy:
                  type: string
                  pattern: '^[0-9a-fA-F]{24}$'
                  example: "507f1f77bcf86cd799439011"
      responses:
        '201':
          description: Data entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/data/{id}:
    get:
      tags:
        - Data
      summary: Get data by ID
      description: Retrieve a specific data entry by ID
      parameters:
        - name: id
          in: path
          required: true
          description: Data entry ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: Data entry details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '404':
          description: Data entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Data
      summary: Update data entry
      description: Update an existing data entry
      parameters:
        - name: id
          in: path
          required: true
          description: Data entry ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated Data Entry"
                description:
                  type: string
                  example: "Updated description"
                content:
                  type: object
                  description: Flexible content object
                type:
                  type: string
                  enum: [user, system, analytics, other]
                category:
                  type: string
                tags:
                  type: array
                  items:
                    type: string
                isPublic:
                  type: boolean
      responses:
        '200':
          description: Data entry updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Data'
        '404':
          description: Data entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Data
      summary: Delete data entry
      description: Permanently delete a data entry
      parameters:
        - name: id
          in: path
          required: true
          description: Data entry ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: Data entry deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Data deleted successfully"
        '404':
          description: Data entry not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/data/category/{category}:
    get:
      tags:
        - Data
      summary: Get data by category
      description: Retrieve public data entries filtered by category
      parameters:
        - name: category
          in: path
          required: true
          description: Category name
          schema:
            type: string
        - name: limit
          in: query
          description: Number of results to return
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: List of data entries in category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Data'

  /api/data/type/{type}:
    get:
      tags:
        - Data
      summary: Get data by type
      description: Retrieve public data entries filtered by type
      parameters:
        - name: type
          in: path
          required: true
          description: Data type
          schema:
            type: string
            enum: [user, system, analytics, other]
        - name: limit
          in: query
          description: Number of results to return
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: List of data entries of specified type
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Data'

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          example: "507f1f77bcf86cd799439011"
        username:
          type: string
          example: "john_doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
      required:
        - _id
        - username
        - email
        - firstName
        - lastName
        - isActive
        - createdAt
        - updatedAt

    Data:
      type: object
      properties:
        _id:
          type: string
          pattern: '^[0-9a-fA-F]{24}$'
          example: "507f1f77bcf86cd799439012"
        title:
          type: string
          example: "Sample Data Entry"
        description:
          type: string
          example: "This is a sample data entry"
        content:
          type: object
          description: Flexible content object
          example: {"key": "value", "number": 42}
        type:
          type: string
          enum: [user, system, analytics, other]
          example: "user"
        category:
          type: string
          example: "general"
        tags:
          type: array
          items:
            type: string
          example: ["tag1", "tag2"]
        isPublic:
          type: boolean
          example: true
        createdBy:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"
      required:
        - _id
        - title
        - content
        - type
        - isPublic
        - createdAt
        - updatedAt

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 50
        total:
          type: integer
          example: 150
        pages:
          type: integer
          example: 3
      required:
        - page
        - limit
        - total
        - pages

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Error message"
        stack:
          type: string
          description: Error stack trace (development only)
          example: "Error: Something went wrong\n    at ..."
      required:
        - success
        - error

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication (future implementation)
